/*
 * |--------------------------------------------------------------|
 * |                                                              |
 * |                   DO NOT DELETE THIS FILE!                   |
 * |                                                              |
 * |    THIS IS THE CORE APPLICATION FILE FOR ALL LOG REQUESTS.   |
 * |                GENERATED BY STELCH WEB SERVER                |
 * |                                                              |
 * |--------------------------------------------------------------|
 */
 
 
var net = require('net');
var logger = require("./logger.js");
var fs = require("fs");
var colors = {
    "red":"\u001b[31m",
    "reset":"\u001b[0m",
    "green":"\u001b[32m",
    "yellow":"\u001b[33m",
    "blue":"\u001b[34m",
    "magenta":"\u001b[35m",
    "cyan":"\u001b[36m",
    "white":"\u001b[37m"
};

var sockets = [];
var authorised = [];
var loggers = [];
var port = 25471;

exports.log = function (msg){
    for(i=0;i<loggers.length;i++){
        loggers[i].write(msg+"\r\n");
    }
};

exports.start = function(http,https) {
    process.stdin.on('data',function(data){
        data=(data.toString('utf-8')).replace("\r\n","");
        var args = data.split(" ");
        handleCMD(args,{write:function(e){process.stdout.write(e);},close:function(e){return;},console:true},http,https);
    });
    var server = net.createServer(function(socket) {

        sockets.push(socket);

        socket.on('data', function(data) {
            data=data.toString('utf-8').replace("\r\n","");
            var args = data.split(" ");
            handleCMD(args,socket,http,https);
        });
        socket.on('end', function() {
            removeSocket(socket);
        });
        socket.on('error', function(error) {
            console.log("["+colors.red+"ERROR"+colors.reset+"] " + error.message);
        });
    });
    function removeSocket(socket) {
        sockets.splice(sockets.indexOf(socket), 1);
    }
    server.on('error', function(error) {
        console.log("["+colors.red+"ERROR"+colors.reset+"] " + error.message);
    });
    server.listen(port, function() {
        console.log("["+colors.green+"STARTED"+colors.reset+"] " + "CLine Handler has started on port "+port+" and is accepting connections.");
    });
};


function handleCMD (args,socket,http,https){
    switch (args[0].toLowerCase().replace("\r\n","")){
        case "pass":
            if(args[1]==="Garcia#02")
            {socket.write(colors.cyan+"OK\r\n"+colors.reset);socket.auth=true;}
            else
            {socket.write(colors.red+"FAIL\r\n"+colors.reset);socket.auth=false;socket.close();}
            break;
        case "level":
            logger.log(colors.reset+"["+colors.cyan+"INFO"+colors.reset+"] The log level has been set to "+colors.red+args[1]+colors.reset+".");
            logger.level(parseInt(args[1]));
            break;
        case "help":
            if(socket.auth!==true&&socket.console===undefined){socket.write(colors.red+"unauthorised\r\n"+colors.reset);break;}
            isConsole=!(socket.console===undefined);
            socket.write(colors.cyan+"----[ "+colors.reset+"Stelch Web Server Help"+colors.cyan+" ]----\r\n"+colors.reset);
            ((isConsole)?console.log(colors.reset+"Viewing in console mode. Some options are "+colors.red+"disabled"+colors.reset+" while in this mode."+colors.reset):{});
            socket.write(colors.green+"  maintenance [HTTP / HTTPS / BOTH] "+colors.reset+" - "+colors.cyan+"Toggle method Maintenance mode setting.\r\n"+colors.reset);
            ((!isConsole)?socket.write(colors.green+"  clear                             "+colors.reset+" - "+colors.cyan+"Clear the contents of the screen.\r\n"+colors.reset):{});
            socket.write(colors.green+"  log                               "+colors.reset+" - "+colors.cyan+"Enter logging output mode\r\n"+colors.reset);
            ((!isConsole)?socket.write(colors.green+"  pass                              "+colors.reset+" - "+colors.cyan+"Specify a login for connection\r\n"+colors.reset):{});
            socket.write(colors.green+"  stats                             "+colors.reset+" - "+colors.cyan+"View the stats of the server\r\n"+colors.reset);
            socket.write(colors.green+"  stop                              "+colors.reset+" - "+colors.cyan+"Stop the Stelch Web Server\r\n"+colors.reset);
            socket.write(colors.green+"  invalidate                        "+colors.reset+" - "+colors.cyan+"sClear the Stelch Web Server\r\n"+colors.reset);
            break;
        case "invalidate":
            if(socket.auth!==true&&socket.console===undefined){socket.write(colors.red+"unauthorised\r\n"+colors.reset);break;}
            delete require.cache[__dirname +'config.yml'];
            socket.write(colors.cyan+"DONE\r\n"+colors.reset);
            break;
        case "stats":
            if(socket.auth!==true&&socket.console===undefined){socket.write(colors.red+"unauthorised\r\n"+colors.reset);break;}
            socket.write(https.rps+" rps");
            break;
        case "stop":
            if(socket.auth!==true&&socket.console===undefined){socket.write(colors.red+"unauthorised\r\n"+colors.reset);break;}
            process.exit();
            break;
        case "log":
            if(socket.auth!==true&&socket.console===undefined){socket.write(colors.red+"unauthorised\r\n"+colors.reset);break;}
            if(loggers.indexOf(socket)<=-1){
                loggers.push(socket);
                socket.write(colors.green+"Entered logging mode\r\n"+colors.reset);
            }else {
                loggers.splice(loggers.indexOf(socket), 1);
                socket.write(colors.cyan+"Exited logging mode\r\n"+colors.reset);
            }
            break;
        case "maintenance":
            if(socket.auth!==true&&socket.console===undefined){socket.write(colors.red+"unauthorised\r\n"+colors.reset);break;}
            if(args[1]===undefined){args[1]="test";}
            switch(args[1].toLowerCase()){
                case "http":
                    if(http.maintenance()){
                        logger.log("HTTP Maintenance replied "+http.maintenance(false)+" to a request to turn it off");
                        if(args[2]&&args[2].toLowerCase()==="json"){socket.write(JSON.stringify({"maintenance":false,"mode":"http"}));}else{socket.write(colors.reset+"["+colors.cyan+"Maintenance"+colors.reset+"] "+colors.green+"HTTP has Exited Maintenance mode."+colors.reset+"\r\n");}
                    }else {
                        logger.log("HTTP Maintenance replied "+http.maintenance(true)+" to a request to turn it on");
                        if(args[2]&&args[2].toLowerCase()==="json"){socket.write(JSON.stringify({"maintenance":true,"mode":"http"}));}else{socket.write(colors.reset+"["+colors.yellow+"Maintenance"+colors.reset+"] "+colors.red+"HTTP has entered Maintenance mode."+colors.reset+"\r\n");}
                    }
                    break;
                case "https":
                    if(https.maintenance()){
                        https.maintenance(false);
                        if(args[2]&&args[2].toLowerCase()==="json"){socket.write(JSON.stringify({"maintenance":false,"mode":"https"}));}else{socket.write(colors.reset+"["+colors.cyan+"Maintenance"+colors.reset+"] "+colors.green+"HTTPS has Exited Maintenance mode."+colors.reset+"\r\n");}
                    }else {
                        https.maintenance(true);
                        if(args[2]&&args[2].toLowerCase()==="json"){socket.write(JSON.stringify({"maintenance":true,"mode":"https"}));}else{socket.write(colors.reset+"["+colors.yellow+"Maintenance"+colors.reset+"] "+colors.red+"HTTPS has entered Maintenance mode."+colors.reset+"\r\n");}
                    }
                    break;
                case "both":
                    if(args[2]&&args[2]!==undefined&&args[2]&&args[2].toLowerCase()==="off"){
                        http.maintenance(false);
                        https.maintenance(false);
                        if(args[2]&&args[2].toLowerCase()==="json"){socket.write(JSON.stringify({"maintenance":false,"mode":["http","https"]}));}else{socket.write(colors.reset+"["+colors.cyan+"Maintenance"+colors.reset+"] "+colors.green+"HTTP & HTTPS have Exited Maintenance mode."+colors.reset+"\r\n");}
                    }else {
                        http.maintenance(true);
                        https.maintenance(true);
                        if(args[2]&&args[2].toLowerCase()==="json"){socket.write(JSON.stringify({"maintenance":true,"mode":["http","https"]}));}else{socket.write(colors.reset+"["+colors.yellow+"Maintenance"+colors.reset+"] "+colors.red+"HTTP & HTTPS have entered Maintenance mode."+colors.reset+"\r\n");}
                    }
                    break;
                default:
                    if(args[2]&&args[2].toLowerCase()==="json"){socket.write(JSON.stringify({"maintenance":{"http":http.maintenance(),"https":https.maintenance()}}));}else{
                    socket.write(colors.green+"Maintenance Manager:\r\n"+
                        colors.reset+"HTTP:  "+((http.maintenance())?colors.red+"TRUE":colors.green+"FALSE")+
                        colors.reset+"\r\nHTTPS: "+((https.maintenance())?colors.red+"TRUE":colors.green+"FALSE")+"\r\n"+colors.reset
                    );}
                    break;
            }
            break;
        case "test":
            console.log(require.cache);
            break;
        case "ban":
            if(args[1]===undefined){socket.write(colors.red+"Missing args.\r\n"+colors.reset);return;}
            var config = JSON.parse(fs.readFileSync("./config.yml"));
            args[1]=args[1].replace("\r","").replace("\n","");
            config.blackList.push(args[1]);
            fs.writeFileSync('./config.yml',JSON.stringify(config, null, 4));
            logger.log(colors.reset+"["+colors.red+"BANNED"+colors.reset+"] The IP "+args[1]+" has been banned.\r\n");
            require("./pageloader").banned=config.blackList;
            break;
        case "unban":
            if(args[1]===undefined){socket.write(colors.red+"Missing args.\r\n"+colors.reset);return;}
            var config = JSON.parse(fs.readFileSync("./config.yml"));
            args[1]=args[1].replace("\r","").replace("\n","");
            config.blackList.splice(config.blackList.indexOf(args[1]),1);
            fs.writeFileSync('./config.yml',JSON.stringify(config, null, 4));
            logger.log(colors.reset+"["+colors.cyan+"UNBANNED"+colors.reset+"] The IP "+args[1]+" has been unbanned.\r\n");
            require("./pageloader").banned=config.blackList;
            break;
        case "config":
            socket.write(JSON.stringify(JSON.parse(fs.readFileSync("./config.yml"))).toString('utf-8'));
            break;
        case "clear":
            socket.write("\033[2J\033[1;1H");
            break;
    }
}
