/*
 * |--------------------------------------------------------------|
 * |                                                              |
 * |                   DO NOT DELETE THIS FILE!                   |
 * |                                                              |
 * |      THIS IS THE CORE APPLICATION FILE FOR WEB REQUESTS.     |
 * |                GENERATED BY STELCH WEB SERVER                |
 * |                                                              |
 * |--------------------------------------------------------------|
 */


let https = require('https');
let page_loader = require("../modules/pageloader.js");
const {gzip, _} = require('node-gzip');
let server = null;
let requests=0;
let fs = require('fs');
let logger = null;
let domain = null;
let colors = {
    "red":"\u001b[31m",
    "reset":"\u001b[0m",
    "green":"\u001b[32m",
    "yellow":"\u001b[33m",
    "blue":"\u001b[34m",
    "magenta":"\u001b[35m",
    "cyan":"\u001b[36m",
    "white":"\u001b[37m"
};

let port = "443";
let maintenance = false;
exports.rps=requests;
exports.maintenance = function(state){
    switch(state){
        case true:
            maintenance=true;
            logger.log(colors.reset+"["+colors.yellow+" MODE:SSL "+colors.reset+"] "+colors.red+"The server has entered maintenance mode, blocking all connections."+colors.reset);
            return true;
        case false:
            maintenance=false;
            logger.log(colors.reset+"["+colors.yellow+" MODE:SSL "+colors.reset+"] "+colors.green+"The server has exited maintenance mode, allowing connections."+colors.reset);
            return false;
        default:
            return maintenance;
    }
};

exports.start=function(cline,local_logger,config){

    /* Define service port (Retrieved from start arguments) */
    port=config['port'];

    /* Define startup domain (Retrieved from start arguments) */
    domain = config['domain'];

    /* Update class logger to global logger */
    logger = local_logger;

    /* Start the server */
    server = https['createServer']({
        /* Configuration Options (SSL) */
        cert:((config.site.SSL.cert)?fs.readFileSync(config.site.SSL.cert):''),
        key:((config.site.SSL.key)?fs.readFileSync(config.site.SSL.key):''),
        ca:((config.site.SSL.ca)?fs.readFileSync(config.site.SSL.ca):''),
    },(req,res)=>{
        let start_time = Date.now();
        /* Write base headers */
        res['setHeader']("Server","sws");
        res['removeHeader']('Date');
        res['removeHeader']('Transfer-Encoding');
        res['setHeader']('Content-Encoding','gzip');

        /* Set local headers */
        let headers = req['headers'];

        headers.host = headers.host.split(":")[0];
        headers.url = req['url'].toString().split(":")[0];
        headers.client_address = res.connection.remoteAddress;

        /* Log connection */
        logger.log(`${colors.blue}HTTPS ${colors.reset}> '${colors.yellow}${headers['client_address']}${colors.reset}' Requested '${colors.yellow}${headers['url']}${colors.reset}'.`);

        /* Direct to API Handler if required */
        if(headers.url.split('/')[1].toLowerCase()==="api"){require('./api/handler')(req,res,headers,true);return;}

        /* Get page content (Pageloader module) */
        let content = page_loader(headers);

        /* Set response header */
        res['setHeader']('Content-Type',((content['args']!==undefined)?content['args'].contentType:'text/plain'));

        /* Use gzip to encode reply */
        gzip(content.data).then((compressed)=>{
            /* Set Content-Size header - Allowing downloads to be calculated */
            res['setHeader']('Accept-Ranges','bytes');
            res['setHeader']('Content-Length',compressed.length);
            res['writeHead'](content['code']);
            /* Send compressed data to client */
            res.write(compressed,()=>{
                /* Close connection once data is sent */

                res.end(()=>{
                    /* Close all existing connections */
                    req.destroy();res.destroy();
                    logger.log(`${colors.blue}HTTPS ${colors.reset}> '${colors.yellow}${headers['client_address']}${colors.reset}' Finished '${colors.yellow}${headers['url']}${colors.reset}' taking ${colors.yellow}${Date.now()-start_time}ms${colors.reset}.`);

                    /* Clear page loader cache */
                    delete page_loader;
                });
            });
        });
    });
    server['listen'](port, function() {
        console.log(`${colors.cyan}STARTED ${colors.reset}> HTTPS Server has started on port ${colors.yellow}${port}${colors.reset}, using domain '${colors.yellow}${domain}${colors.reset}'.`);
    });
};