/*
 * |--------------------------------------------------------------|
 * |                                                              |
 * |                   DO NOT DELETE THIS FILE!                   |
 * |                                                              |
 * |    THIS IS THE CORE APPLICATION FILE FOR ALL WEB REQUESTS.   |
 * |                GENERATED BY STELCH WEB SERVER                |
 * |                                                              |
 * |--------------------------------------------------------------|
 */


let fs = require("fs");
let conf = JSON.parse(fs.readFileSync("./config.yml"));
let files = require("../modules/file_decoder");
let logger = require("../modules/logger.js");
exports.banned = conf.blackList;

module.exports = function(headers,socket){
    let pageLoader = {
        error_pages : {
            maintenance: fs.readFileSync("sites/errors/maintenance.html").toString('utf-8'),
            invalid_host: fs.readFileSync("sites/errors/400.html").toString('utf-8'),
            no_index: fs.readFileSync("sites/errors/snc.html").toString('utf-8'),
            forbidden: fs.readFileSync("sites/errors/403.html").toString('utf-8'),
            not_found: fs.readFileSync("sites/errors/404.html").toString('utf-8'),
            internal_error: fs.readFileSync("sites/errors/500.html").toString('utf-8'),
            banned: fs.readFileSync("sites/errors/banned.html").toString('utf-8')
        },
        response : (data,code,args)=>{if(typeof data === "string"){data=pageLoader.varableReplace(data);}return {data:data,code:code,args:args};},
        getArgs : ()=>{let dir=headers.url;let args={};try{if(!(dir.split("?").length<=1)){for(i=0;i<dir.split("?")[1].split("&").length;i++){var arg=dir.split("?")[1].split("&")[i];arg=arg.split("=");args[arg[0]]=arg[1]}}}catch(e){logger.error(e.toString());}return args;},
        resolveDomain : ()=>{return ((headers['host']&&conf['sites'][headers['host']])?headers['host'].toString('utf-8').split(":")[0]:"other");},
        isBlacklisted : ()=>{return (conf.blackList.indexOf(headers['client_address'].replace("::ffff:",""))>-1);},
        varableReplace:(content)=>{var find=["<%SERVER_BUILD%>","<%USER_IP%>","<%SERVER_RPS%>","<%DIR%>","<%SERVER.TIME%>","<%SERVER.PORT%>","<%GET.Q%>"];var replace=[conf.build,headers.client_address,headers.rps,"",Date.now(),0,""];return content.toString('utf-8').replaceArray(find,replace)},
        dirExists : (dir)=>{return fs.existsSync(dir);},
    };

    /* Check Maintenance */
    if(headers===true){return pageLoader.response(pageLoader.error_pages.maintenance,500,{contentType:"text/html"});}

    /* Invalid Request */
    if(!headers['url']){return pageLoader.response(pageLoader.error_pages.internal_error,500,{contentType:"text/html"});}

    /* IP Blacklisted */
    if(pageLoader.isBlacklisted()){return pageLoader.response(pageLoader.error_pages.banned,403,{contentType:"text/html"});}

    /* Set Requested Domain */
    let domain = pageLoader.resolveDomain();
    /* Set Requested File */
    let dir = headers['url'].toString('utf-8').split("?")[0];
    /* Retrieve GET Arguments */
    let args = pageLoader.getArgs();

    /* Load site configuration */
    let site_config = conf['sites'][domain];

    /* Check site configuration exists (Is it a valid hostname?) */
    if(!site_config){return pageLoader.response(pageLoader.error_pages.invalid_host,400,{contentType:"text/html"});}

    /* Apply default filename (Is none is specified) */
    if(dir.split("/").pop()===""){if(pageLoader.dirExists(site_config.dir+dir+site_config.default_file)){headers.url=dir+site_config.default_file;dir=headers.url}}

    /* Check if File exists */
    if(!pageLoader.dirExists(site_config['dir']+dir)){return pageLoader.response(pageLoader.error_pages.not_found,404,{contentType:"text/html"});}

    /* Check if directory */
    if(fs.lstatSync(site_config['dir']+dir).isDirectory()){return pageLoader.response(pageLoader.error_pages.forbidden,403,{contentType:"text/html"});}

    /* Reply with page content */
    return pageLoader.response(fs.readFileSync(site_config['dir']+dir),200,{contentType:((files[(dir.split(".").pop())])?files[(dir.split(".").pop())]:"application/octet-stream")});
};

/* Function Additions */
String.prototype.replaceArray=function(find,replace){var replaceString=this;var regex;for(var i=0;i<find.length;i++){regex=new RegExp(find[i],"g");replaceString=replaceString.replace(regex,replace[i])}
    return replaceString};